// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: TargetInfo.proto

// user åŒ…

package targetinfo

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// heart beat package
type HeartBeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeatTime int64  `protobuf:"varint,1,opt,name=BeatTime,proto3" json:"BeatTime,omitempty"`
	HostKey  string `protobuf:"bytes,2,opt,name=HostKey,proto3" json:"HostKey,omitempty"`
	AuthKey  string `protobuf:"bytes,3,opt,name=AuthKey,proto3" json:"AuthKey,omitempty"`
}

func (x *HeartBeat) Reset() {
	*x = HeartBeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TargetInfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeat) ProtoMessage() {}

func (x *HeartBeat) ProtoReflect() protoreflect.Message {
	mi := &file_TargetInfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeat.ProtoReflect.Descriptor instead.
func (*HeartBeat) Descriptor() ([]byte, []int) {
	return file_TargetInfo_proto_rawDescGZIP(), []int{0}
}

func (x *HeartBeat) GetBeatTime() int64 {
	if x != nil {
		return x.BeatTime
	}
	return 0
}

func (x *HeartBeat) GetHostKey() string {
	if x != nil {
		return x.HostKey
	}
	return ""
}

func (x *HeartBeat) GetAuthKey() string {
	if x != nil {
		return x.AuthKey
	}
	return ""
}

type NetStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ByteSend  int64  `protobuf:"varint,2,opt,name=ByteSend,proto3" json:"ByteSend,omitempty"`
	BytesRecv int64  `protobuf:"varint,3,opt,name=BytesRecv,proto3" json:"BytesRecv,omitempty"`
}

func (x *NetStatus) Reset() {
	*x = NetStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TargetInfo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetStatus) ProtoMessage() {}

func (x *NetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_TargetInfo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetStatus.ProtoReflect.Descriptor instead.
func (*NetStatus) Descriptor() ([]byte, []int) {
	return file_TargetInfo_proto_rawDescGZIP(), []int{1}
}

func (x *NetStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetStatus) GetByteSend() int64 {
	if x != nil {
		return x.ByteSend
	}
	return 0
}

func (x *NetStatus) GetBytesRecv() int64 {
	if x != nil {
		return x.BytesRecv
	}
	return 0
}

//
type DiskStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadBytes  int64  `protobuf:"varint,1,opt,name=ReadBytes,proto3" json:"ReadBytes,omitempty"`
	WriteBytes int64  `protobuf:"varint,2,opt,name=WriteBytes,proto3" json:"WriteBytes,omitempty"`
	ReadCount  int64  `protobuf:"varint,3,opt,name=ReadCount,proto3" json:"ReadCount,omitempty"`
	WriteCount int64  `protobuf:"varint,4,opt,name=WriteCount,proto3" json:"WriteCount,omitempty"`
	Name       string `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *DiskStatus) Reset() {
	*x = DiskStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TargetInfo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskStatus) ProtoMessage() {}

func (x *DiskStatus) ProtoReflect() protoreflect.Message {
	mi := &file_TargetInfo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskStatus.ProtoReflect.Descriptor instead.
func (*DiskStatus) Descriptor() ([]byte, []int) {
	return file_TargetInfo_proto_rawDescGZIP(), []int{2}
}

func (x *DiskStatus) GetReadBytes() int64 {
	if x != nil {
		return x.ReadBytes
	}
	return 0
}

func (x *DiskStatus) GetWriteBytes() int64 {
	if x != nil {
		return x.WriteBytes
	}
	return 0
}

func (x *DiskStatus) GetReadCount() int64 {
	if x != nil {
		return x.ReadCount
	}
	return 0
}

func (x *DiskStatus) GetWriteCount() int64 {
	if x != nil {
		return x.WriteCount
	}
	return 0
}

func (x *DiskStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NetIoCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByteSend  int64 `protobuf:"varint,1,opt,name=ByteSend,proto3" json:"ByteSend,omitempty"`
	BytesRecv int64 `protobuf:"varint,2,opt,name=BytesRecv,proto3" json:"BytesRecv,omitempty"`
}

func (x *NetIoCount) Reset() {
	*x = NetIoCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TargetInfo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetIoCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetIoCount) ProtoMessage() {}

func (x *NetIoCount) ProtoReflect() protoreflect.Message {
	mi := &file_TargetInfo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetIoCount.ProtoReflect.Descriptor instead.
func (*NetIoCount) Descriptor() ([]byte, []int) {
	return file_TargetInfo_proto_rawDescGZIP(), []int{3}
}

func (x *NetIoCount) GetByteSend() int64 {
	if x != nil {
		return x.ByteSend
	}
	return 0
}

func (x *NetIoCount) GetBytesRecv() int64 {
	if x != nil {
		return x.BytesRecv
	}
	return 0
}

type TargetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostName string `protobuf:"bytes,1,opt,name=HostName,proto3" json:"HostName,omitempty"`
	// logic cpus
	CPUs int32 `protobuf:"varint,2,opt,name=CPUs,proto3" json:"CPUs,omitempty"`
	// cpu percents
	CPUpr           []float32     `protobuf:"fixed32,3,rep,packed,name=CPUpr,proto3" json:"CPUpr,omitempty"`
	Uptime          int64         `protobuf:"varint,4,opt,name=Uptime,proto3" json:"Uptime,omitempty"`
	BootTime        int64         `protobuf:"varint,5,opt,name=BootTime,proto3" json:"BootTime,omitempty"`
	OS              string        `protobuf:"bytes,6,opt,name=OS,proto3" json:"OS,omitempty"`
	TotalMem        int64         `protobuf:"varint,7,opt,name=TotalMem,proto3" json:"TotalMem,omitempty"`
	AvailableMem    int64         `protobuf:"varint,8,opt,name=AvailableMem,proto3" json:"AvailableMem,omitempty"`
	UsedMem         int64         `protobuf:"varint,9,opt,name=UsedMem,proto3" json:"UsedMem,omitempty"`
	UsedPercentMem  float32       `protobuf:"fixed32,10,opt,name=UsedPercentMem,proto3" json:"UsedPercentMem,omitempty"`
	FreeMem         int64         `protobuf:"varint,11,opt,name=FreeMem,proto3" json:"FreeMem,omitempty"`
	TotalDisk       int64         `protobuf:"varint,12,opt,name=TotalDisk,proto3" json:"TotalDisk,omitempty"`
	FreeDisk        int64         `protobuf:"varint,13,opt,name=FreeDisk,proto3" json:"FreeDisk,omitempty"`
	UsedDisk        int64         `protobuf:"varint,14,opt,name=UsedDisk,proto3" json:"UsedDisk,omitempty"`
	UsedPercentDisk int64         `protobuf:"varint,15,opt,name=UsedPercentDisk,proto3" json:"UsedPercentDisk,omitempty"`
	DiskStatus      []*DiskStatus `protobuf:"bytes,16,rep,name=DiskStatus,proto3" json:"DiskStatus,omitempty"`
	NetStatus       []*NetStatus  `protobuf:"bytes,17,rep,name=NetStatus,proto3" json:"NetStatus,omitempty"`
	Ip              string        `protobuf:"bytes,18,opt,name=Ip,proto3" json:"Ip,omitempty"`
	IpCountry       string        `protobuf:"bytes,19,opt,name=IpCountry,proto3" json:"IpCountry,omitempty"`
	IpRegion        string        `protobuf:"bytes,20,opt,name=IpRegion,proto3" json:"IpRegion,omitempty"`
	HostKey         string        `protobuf:"bytes,21,opt,name=HostKey,proto3" json:"HostKey,omitempty"`
	CheckTime       int64         `protobuf:"varint,22,opt,name=CheckTime,proto3" json:"CheckTime,omitempty"`
	AuthKey         string        `protobuf:"bytes,23,opt,name=AuthKey,proto3" json:"AuthKey,omitempty"`
}

func (x *TargetInfo) Reset() {
	*x = TargetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TargetInfo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetInfo) ProtoMessage() {}

func (x *TargetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_TargetInfo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetInfo.ProtoReflect.Descriptor instead.
func (*TargetInfo) Descriptor() ([]byte, []int) {
	return file_TargetInfo_proto_rawDescGZIP(), []int{4}
}

func (x *TargetInfo) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *TargetInfo) GetCPUs() int32 {
	if x != nil {
		return x.CPUs
	}
	return 0
}

func (x *TargetInfo) GetCPUpr() []float32 {
	if x != nil {
		return x.CPUpr
	}
	return nil
}

func (x *TargetInfo) GetUptime() int64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *TargetInfo) GetBootTime() int64 {
	if x != nil {
		return x.BootTime
	}
	return 0
}

func (x *TargetInfo) GetOS() string {
	if x != nil {
		return x.OS
	}
	return ""
}

func (x *TargetInfo) GetTotalMem() int64 {
	if x != nil {
		return x.TotalMem
	}
	return 0
}

func (x *TargetInfo) GetAvailableMem() int64 {
	if x != nil {
		return x.AvailableMem
	}
	return 0
}

func (x *TargetInfo) GetUsedMem() int64 {
	if x != nil {
		return x.UsedMem
	}
	return 0
}

func (x *TargetInfo) GetUsedPercentMem() float32 {
	if x != nil {
		return x.UsedPercentMem
	}
	return 0
}

func (x *TargetInfo) GetFreeMem() int64 {
	if x != nil {
		return x.FreeMem
	}
	return 0
}

func (x *TargetInfo) GetTotalDisk() int64 {
	if x != nil {
		return x.TotalDisk
	}
	return 0
}

func (x *TargetInfo) GetFreeDisk() int64 {
	if x != nil {
		return x.FreeDisk
	}
	return 0
}

func (x *TargetInfo) GetUsedDisk() int64 {
	if x != nil {
		return x.UsedDisk
	}
	return 0
}

func (x *TargetInfo) GetUsedPercentDisk() int64 {
	if x != nil {
		return x.UsedPercentDisk
	}
	return 0
}

func (x *TargetInfo) GetDiskStatus() []*DiskStatus {
	if x != nil {
		return x.DiskStatus
	}
	return nil
}

func (x *TargetInfo) GetNetStatus() []*NetStatus {
	if x != nil {
		return x.NetStatus
	}
	return nil
}

func (x *TargetInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *TargetInfo) GetIpCountry() string {
	if x != nil {
		return x.IpCountry
	}
	return ""
}

func (x *TargetInfo) GetIpRegion() string {
	if x != nil {
		return x.IpRegion
	}
	return ""
}

func (x *TargetInfo) GetHostKey() string {
	if x != nil {
		return x.HostKey
	}
	return ""
}

func (x *TargetInfo) GetCheckTime() int64 {
	if x != nil {
		return x.CheckTime
	}
	return 0
}

func (x *TargetInfo) GetAuthKey() string {
	if x != nil {
		return x.AuthKey
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response int32  `protobuf:"varint,1,opt,name=Response,proto3" json:"Response,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_TargetInfo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_TargetInfo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_TargetInfo_proto_rawDescGZIP(), []int{5}
}

func (x *Response) GetResponse() int32 {
	if x != nil {
		return x.Response
	}
	return 0
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_TargetInfo_proto protoreflect.FileDescriptor

var file_TargetInfo_proto_rawDesc = []byte{
	0x0a, 0x10, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x5b,
	0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42,
	0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42,
	0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x59, 0x0a, 0x09, 0x4e,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x42, 0x79, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x42, 0x79, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x63, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x63, 0x76, 0x22, 0x9c, 0x01, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x52, 0x65, 0x61, 0x64, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x52, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x0a, 0x4e, 0x65, 0x74, 0x49, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x79, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x79, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x76, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x63, 0x76, 0x22, 0xbb, 0x05,
	0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x50, 0x55, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x50, 0x55, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x50, 0x55, 0x70, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x43, 0x50, 0x55,
	0x70, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x6f,
	0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x42, 0x6f,
	0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x53, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x4f, 0x53, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d,
	0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4d,
	0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x65, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x64, 0x4d, 0x65,
	0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x55, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d,
	0x12, 0x26, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x72, 0x65, 0x65,
	0x4d, 0x65, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x46, 0x72, 0x65, 0x65, 0x4d,
	0x65, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x6b,
	0x12, 0x1a, 0x0a, 0x08, 0x46, 0x72, 0x65, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x46, 0x72, 0x65, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08,
	0x55, 0x73, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x55, 0x73, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x64, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x12, 0x36, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x09, 0x4e, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x4e, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x49, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x49, 0x70, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x6f, 0x73,
	0x74, 0x4b, 0x65, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x6f, 0x73, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x22, 0x40, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x9e, 0x01,
	0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x46, 0x0a, 0x10, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x14, 0x2e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x45, 0x0a, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x15, 0x2e, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x1a, 0x15, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x0e,
	0x5a, 0x0c, 0x2e, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_TargetInfo_proto_rawDescOnce sync.Once
	file_TargetInfo_proto_rawDescData = file_TargetInfo_proto_rawDesc
)

func file_TargetInfo_proto_rawDescGZIP() []byte {
	file_TargetInfo_proto_rawDescOnce.Do(func() {
		file_TargetInfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_TargetInfo_proto_rawDescData)
	})
	return file_TargetInfo_proto_rawDescData
}

var file_TargetInfo_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_TargetInfo_proto_goTypes = []interface{}{
	(*HeartBeat)(nil),  // 0: targetinfo.HeartBeat
	(*NetStatus)(nil),  // 1: targetinfo.NetStatus
	(*DiskStatus)(nil), // 2: targetinfo.DiskStatus
	(*NetIoCount)(nil), // 3: targetinfo.NetIoCount
	(*TargetInfo)(nil), // 4: targetinfo.TargetInfo
	(*Response)(nil),   // 5: targetinfo.Response
}
var file_TargetInfo_proto_depIdxs = []int32{
	2, // 0: targetinfo.TargetInfo.DiskStatus:type_name -> targetinfo.DiskStatus
	1, // 1: targetinfo.TargetInfo.NetStatus:type_name -> targetinfo.NetStatus
	4, // 2: targetinfo.TargetService.TargetInfoReport:input_type -> targetinfo.TargetInfo
	0, // 3: targetinfo.TargetService.TargetHeartBeat:input_type -> targetinfo.HeartBeat
	5, // 4: targetinfo.TargetService.TargetInfoReport:output_type -> targetinfo.Response
	0, // 5: targetinfo.TargetService.TargetHeartBeat:output_type -> targetinfo.HeartBeat
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_TargetInfo_proto_init() }
func file_TargetInfo_proto_init() {
	if File_TargetInfo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_TargetInfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TargetInfo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TargetInfo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TargetInfo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetIoCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TargetInfo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_TargetInfo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_TargetInfo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_TargetInfo_proto_goTypes,
		DependencyIndexes: file_TargetInfo_proto_depIdxs,
		MessageInfos:      file_TargetInfo_proto_msgTypes,
	}.Build()
	File_TargetInfo_proto = out.File
	file_TargetInfo_proto_rawDesc = nil
	file_TargetInfo_proto_goTypes = nil
	file_TargetInfo_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TargetServiceClient is the client API for TargetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TargetServiceClient interface {
	// report target info to server
	TargetInfoReport(ctx context.Context, opts ...grpc.CallOption) (TargetService_TargetInfoReportClient, error)
	// rpc TargetPush(TargetInfo) returns (stream TargetInfo) {}
	// heart beat to keeplive
	TargetHeartBeat(ctx context.Context, opts ...grpc.CallOption) (TargetService_TargetHeartBeatClient, error)
}

type targetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTargetServiceClient(cc grpc.ClientConnInterface) TargetServiceClient {
	return &targetServiceClient{cc}
}

func (c *targetServiceClient) TargetInfoReport(ctx context.Context, opts ...grpc.CallOption) (TargetService_TargetInfoReportClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TargetService_serviceDesc.Streams[0], "/targetinfo.TargetService/TargetInfoReport", opts...)
	if err != nil {
		return nil, err
	}
	x := &targetServiceTargetInfoReportClient{stream}
	return x, nil
}

type TargetService_TargetInfoReportClient interface {
	Send(*TargetInfo) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type targetServiceTargetInfoReportClient struct {
	grpc.ClientStream
}

func (x *targetServiceTargetInfoReportClient) Send(m *TargetInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *targetServiceTargetInfoReportClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *targetServiceClient) TargetHeartBeat(ctx context.Context, opts ...grpc.CallOption) (TargetService_TargetHeartBeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TargetService_serviceDesc.Streams[1], "/targetinfo.TargetService/TargetHeartBeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &targetServiceTargetHeartBeatClient{stream}
	return x, nil
}

type TargetService_TargetHeartBeatClient interface {
	Send(*HeartBeat) error
	Recv() (*HeartBeat, error)
	grpc.ClientStream
}

type targetServiceTargetHeartBeatClient struct {
	grpc.ClientStream
}

func (x *targetServiceTargetHeartBeatClient) Send(m *HeartBeat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *targetServiceTargetHeartBeatClient) Recv() (*HeartBeat, error) {
	m := new(HeartBeat)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TargetServiceServer is the server API for TargetService service.
type TargetServiceServer interface {
	// report target info to server
	TargetInfoReport(TargetService_TargetInfoReportServer) error
	// rpc TargetPush(TargetInfo) returns (stream TargetInfo) {}
	// heart beat to keeplive
	TargetHeartBeat(TargetService_TargetHeartBeatServer) error
}

// UnimplementedTargetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTargetServiceServer struct {
}

func (*UnimplementedTargetServiceServer) TargetInfoReport(TargetService_TargetInfoReportServer) error {
	return status.Errorf(codes.Unimplemented, "method TargetInfoReport not implemented")
}
func (*UnimplementedTargetServiceServer) TargetHeartBeat(TargetService_TargetHeartBeatServer) error {
	return status.Errorf(codes.Unimplemented, "method TargetHeartBeat not implemented")
}

func RegisterTargetServiceServer(s *grpc.Server, srv TargetServiceServer) {
	s.RegisterService(&_TargetService_serviceDesc, srv)
}

func _TargetService_TargetInfoReport_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TargetServiceServer).TargetInfoReport(&targetServiceTargetInfoReportServer{stream})
}

type TargetService_TargetInfoReportServer interface {
	Send(*Response) error
	Recv() (*TargetInfo, error)
	grpc.ServerStream
}

type targetServiceTargetInfoReportServer struct {
	grpc.ServerStream
}

func (x *targetServiceTargetInfoReportServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *targetServiceTargetInfoReportServer) Recv() (*TargetInfo, error) {
	m := new(TargetInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TargetService_TargetHeartBeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TargetServiceServer).TargetHeartBeat(&targetServiceTargetHeartBeatServer{stream})
}

type TargetService_TargetHeartBeatServer interface {
	Send(*HeartBeat) error
	Recv() (*HeartBeat, error)
	grpc.ServerStream
}

type targetServiceTargetHeartBeatServer struct {
	grpc.ServerStream
}

func (x *targetServiceTargetHeartBeatServer) Send(m *HeartBeat) error {
	return x.ServerStream.SendMsg(m)
}

func (x *targetServiceTargetHeartBeatServer) Recv() (*HeartBeat, error) {
	m := new(HeartBeat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TargetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "targetinfo.TargetService",
	HandlerType: (*TargetServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TargetInfoReport",
			Handler:       _TargetService_TargetInfoReport_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TargetHeartBeat",
			Handler:       _TargetService_TargetHeartBeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "TargetInfo.proto",
}
